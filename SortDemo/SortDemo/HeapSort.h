//
//  HeapSort.h
//  SortDemo
//
//  Created by 夏志勇 on 2019/11/20.
//  Copyright © 2019 夏志勇. All rights reserved.
//  7.堆排序 Heap Sort 利用堆的性质进行的一种选择排序

#import <Foundation/Foundation.h>

/*
 堆是一棵顺序存储的完全二叉树。
 其中每个结点的关键字(值)都不大于其孩子结点的关键字(值)，这样的堆称为小根堆。
 其中每个结点的关键字(值)都不小于其孩子结点的关键字(值)，这样的堆称为大根堆。
 举例来说，对于n个元素的序列{R0, R1, ... , Rn-1}，当且仅当满足下列关系之一时，称之为堆：
 Ri <= R2i+1 且 Ri <= R2i+2 (小根堆)
 Ri >= R2i+1 且 Ri >= R2i+2 (大根堆)
 其中i=1,2,…,n/2向下取整；
 
 设当前元素在数组中以R[i]表示，那么，
 (1) 它的左孩子结点是：R[2*i+1];
 (2) 它的右孩子结点是：R[2*i+2];
 (3) 它的父结点是：R[(i-1)/2];
 (4) R[i] <= R[2*i+1] 且 R[i] <= R[2i+2]。

 首先，按堆的定义将数组R[0..n-1]调整为堆（这个过程称为创建初始堆），交换R[0]和R[n-1]；
 然后，将R[0..n-2]调整为堆，交换R[0]和R[n-2]；
 如此反复，直到交换了R[0]和R[1]为止。

 以上思想可归纳为两个操作：
（1）根据初始数组去构造初始堆（构建一个完全二叉树，保证所有的父结点都比它的孩子结点数值大）。
（2）每次交换第一个和最后一个元素，输出最后一个元素（最大值），然后把剩下元素重新调整为大根堆。
 当输出完最后一个元素后，这个数组已经是按照从小到大的顺序排列了。
 
 1> 时间复杂度：
    1. 平均时间复杂度（平均情况）：O(NlogN)
    2. 最坏情况：O(NlogN)
    3. 最好情况：O(NlogN)
 2> 空间复杂度：O(1)
 3> 稳定性：不稳定
 4> 排序类别：选择排序
 
 https://cuijiahua.com/blog/2018/01/algorithm_6.html
 */


NS_ASSUME_NONNULL_BEGIN

@interface HeapSort : NSObject

+ (NSArray *)heapSort:(NSArray *)list;

@end

NS_ASSUME_NONNULL_END
